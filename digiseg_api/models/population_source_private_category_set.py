# coding: utf-8

"""
    Digiseg API

    ### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@digiseg.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from digiseg_api.models.population_source_private_category_set_building_age import PopulationSourcePrivateCategorySetBuildingAge
from digiseg_api.models.population_source_private_category_set_cars import PopulationSourcePrivateCategorySetCars
from digiseg_api.models.population_source_private_category_set_children import PopulationSourcePrivateCategorySetChildren
from digiseg_api.models.population_source_private_category_set_education import PopulationSourcePrivateCategorySetEducation
from digiseg_api.models.population_source_private_category_set_home_ownership import PopulationSourcePrivateCategorySetHomeOwnership
from digiseg_api.models.population_source_private_category_set_home_type import PopulationSourcePrivateCategorySetHomeType
from digiseg_api.models.population_source_private_category_set_income import PopulationSourcePrivateCategorySetIncome
from digiseg_api.models.population_source_private_category_set_lifecycle import PopulationSourcePrivateCategorySetLifecycle
from digiseg_api.models.population_source_private_category_set_living_space import PopulationSourcePrivateCategorySetLivingSpace
from digiseg_api.models.population_source_private_category_set_neighbourhood_type import PopulationSourcePrivateCategorySetNeighbourhoodType
from digiseg_api.models.population_source_private_category_set_savings import PopulationSourcePrivateCategorySetSavings
from digiseg_api.models.population_source_private_category_set_tech_level import PopulationSourcePrivateCategorySetTechLevel
from typing import Optional, Set
from typing_extensions import Self

class PopulationSourcePrivateCategorySet(BaseModel):
    """
    PopulationSourcePrivateCategorySet
    """ # noqa: E501
    home_type: PopulationSourcePrivateCategorySetHomeType
    savings: PopulationSourcePrivateCategorySetSavings
    lifecycle: PopulationSourcePrivateCategorySetLifecycle
    cars: PopulationSourcePrivateCategorySetCars
    children: PopulationSourcePrivateCategorySetChildren
    education: PopulationSourcePrivateCategorySetEducation
    neighbourhood_type: PopulationSourcePrivateCategorySetNeighbourhoodType
    income: PopulationSourcePrivateCategorySetIncome
    home_ownership: PopulationSourcePrivateCategorySetHomeOwnership
    building_age: PopulationSourcePrivateCategorySetBuildingAge
    living_space: PopulationSourcePrivateCategorySetLivingSpace
    tech_level: PopulationSourcePrivateCategorySetTechLevel
    __properties: ClassVar[List[str]] = ["home_type", "savings", "lifecycle", "cars", "children", "education", "neighbourhood_type", "income", "home_ownership", "building_age", "living_space", "tech_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PopulationSourcePrivateCategorySet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of home_type
        if self.home_type:
            _dict['home_type'] = self.home_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of savings
        if self.savings:
            _dict['savings'] = self.savings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle
        if self.lifecycle:
            _dict['lifecycle'] = self.lifecycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cars
        if self.cars:
            _dict['cars'] = self.cars.to_dict()
        # override the default output from pydantic by calling `to_dict()` of children
        if self.children:
            _dict['children'] = self.children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of education
        if self.education:
            _dict['education'] = self.education.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neighbourhood_type
        if self.neighbourhood_type:
            _dict['neighbourhood_type'] = self.neighbourhood_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of income
        if self.income:
            _dict['income'] = self.income.to_dict()
        # override the default output from pydantic by calling `to_dict()` of home_ownership
        if self.home_ownership:
            _dict['home_ownership'] = self.home_ownership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of building_age
        if self.building_age:
            _dict['building_age'] = self.building_age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of living_space
        if self.living_space:
            _dict['living_space'] = self.living_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tech_level
        if self.tech_level:
            _dict['tech_level'] = self.tech_level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PopulationSourcePrivateCategorySet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "home_type": PopulationSourcePrivateCategorySetHomeType.from_dict(obj["home_type"]) if obj.get("home_type") is not None else None,
            "savings": PopulationSourcePrivateCategorySetSavings.from_dict(obj["savings"]) if obj.get("savings") is not None else None,
            "lifecycle": PopulationSourcePrivateCategorySetLifecycle.from_dict(obj["lifecycle"]) if obj.get("lifecycle") is not None else None,
            "cars": PopulationSourcePrivateCategorySetCars.from_dict(obj["cars"]) if obj.get("cars") is not None else None,
            "children": PopulationSourcePrivateCategorySetChildren.from_dict(obj["children"]) if obj.get("children") is not None else None,
            "education": PopulationSourcePrivateCategorySetEducation.from_dict(obj["education"]) if obj.get("education") is not None else None,
            "neighbourhood_type": PopulationSourcePrivateCategorySetNeighbourhoodType.from_dict(obj["neighbourhood_type"]) if obj.get("neighbourhood_type") is not None else None,
            "income": PopulationSourcePrivateCategorySetIncome.from_dict(obj["income"]) if obj.get("income") is not None else None,
            "home_ownership": PopulationSourcePrivateCategorySetHomeOwnership.from_dict(obj["home_ownership"]) if obj.get("home_ownership") is not None else None,
            "building_age": PopulationSourcePrivateCategorySetBuildingAge.from_dict(obj["building_age"]) if obj.get("building_age") is not None else None,
            "living_space": PopulationSourcePrivateCategorySetLivingSpace.from_dict(obj["living_space"]) if obj.get("living_space") is not None else None,
            "tech_level": PopulationSourcePrivateCategorySetTechLevel.from_dict(obj["tech_level"]) if obj.get("tech_level") is not None else None
        })
        return _obj


